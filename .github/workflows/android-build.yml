name: Android Build for F-Droid

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  test-build:
    name: Test F-Droid Compatible Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0

    - name: Install dependencies
      run: npm ci

    - name: Verify no tracking dependencies
      run: |
        echo "Checking for prohibited tracking libraries..."
        if grep -r "matomo\|firebase\|crashlytics\|analytics" package.json package-lock.json || true; then
          echo "❌ Found tracking dependencies - not F-Droid compatible"
          exit 1
        fi
        echo "✅ No tracking dependencies found"

    - name: Verify license compliance
      run: |
        if [ ! -f LICENSE ]; then
          echo "❌ LICENSE file missing"
          exit 1
        fi
        if ! grep -q "MIT License" LICENSE; then
          echo "❌ Not MIT licensed"
          exit 1
        fi
        echo "✅ MIT License verified"

    - name: Build Next.js static export
      run: |
        npm run update-version
        npm run generate-icons
        npm run build

    - name: Verify static export
      run: |
        if [ ! -d "out" ]; then
          echo "❌ Static export failed - no 'out' directory"
          exit 1
        fi
        if [ ! -f "out/index.html" ]; then
          echo "❌ Static export incomplete - no index.html"
          exit 1
        fi
        echo "✅ Static export successful"

    - name: Setup Capacitor Android
      run: |
        npx cap copy android
        npx cap sync android

    - name: Verify Android project
      run: |
        if [ ! -f "android/app/build.gradle" ]; then
          echo "❌ Android project not properly generated"
          exit 1
        fi
        echo "✅ Android project verified"

    - name: Build Android APK (debug)
      working-directory: android
      run: |
        chmod +x gradlew
        ./gradlew assembleDebug --no-daemon --stacktrace

    - name: Verify APK generation
      run: |
        if [ ! -f "android/app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "❌ APK generation failed"
          exit 1
        fi
        echo "✅ APK generated successfully"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: currency-calculator-debug-apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30

  fdroid-metadata-validation:
    name: Validate F-Droid Metadata
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install F-Droid server tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip python3-yaml
        pip3 install --user pyyaml requests

    - name: Validate metadata YAML
      run: |
        python3 -c "
        import yaml
        import sys

        try:
            with open('metadata/de.danielhilmer.exchange.yml', 'r') as f:
                metadata = yaml.safe_load(f)

            required_fields = ['Categories', 'License', 'WebSite', 'SourceCode', 'Summary', 'Description']
            missing_fields = [field for field in required_fields if field not in metadata]

            if missing_fields:
                print(f'❌ Missing required fields: {missing_fields}')
                sys.exit(1)

            if metadata['License'] != 'MIT':
                print('❌ License must be MIT')
                sys.exit(1)

            if 'Money' not in metadata['Categories']:
                print('❌ Must be in Money category')
                sys.exit(1)

            print('✅ F-Droid metadata validation passed')

        except Exception as e:
            print(f'❌ Metadata validation failed: {e}')
            sys.exit(1)
        "

    - name: Check fastlane metadata
      run: |
        required_files=(
          "fastlane/metadata/android/en-US/title.txt"
          "fastlane/metadata/android/en-US/short_description.txt"
          "fastlane/metadata/android/en-US/full_description.txt"
          "fastlane/metadata/android/de-DE/title.txt"
          "fastlane/metadata/android/de-DE/short_description.txt"
          "fastlane/metadata/android/de-DE/full_description.txt"
        )

        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done

        echo "✅ Fastlane metadata complete"

  security-audit:
    name: Security and Privacy Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: NPM Security Audit
      run: |
        npm audit --audit-level=moderate

    - name: Check for tracking code
      run: |
        echo "Scanning source code for tracking patterns..."

        # Define prohibited patterns
        prohibited_patterns=(
          "google-analytics"
          "gtag"
          "facebook.com/tr"
          "doubleclick.net"
          "googletagmanager"
          "mixpanel"
          "amplitude"
          "segment.com"
          "hotjar"
          "fullstory"
          "logrocket"
          "_gaq"
          "_ga"
          "fbq"
          "analytics"
          "tracking"
          "telemetry"
        )

        tracking_found=false

        for pattern in "${prohibited_patterns[@]}"; do
          if grep -r --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" "$pattern" src/ 2>/dev/null; then
            echo "❌ Found prohibited tracking pattern: $pattern"
            tracking_found=true
          fi
        done

        if [ "$tracking_found" = true ]; then
          echo "❌ Tracking code detected - not F-Droid compatible"
          exit 1
        fi

        echo "✅ No tracking code found"

    - name: Verify no proprietary dependencies
      run: |
        echo "Checking for proprietary dependencies..."

        # Extract all dependencies
        deps=$(npm list --all --parseable | grep node_modules | sed 's/.*node_modules\///' | sort -u)

        # Known proprietary packages (add more as needed)
        proprietary_packages=(
          "firebase"
          "@firebase/"
          "react-native-firebase"
          "@react-native-firebase/"
          "crashlytics"
          "@microsoft/appcenter"
          "appcenter"
          "bugsnag"
          "@bugsnag/"
          "sentry"
          "@sentry/"
          "mixpanel"
          "amplitude"
          "segment"
          "@segment/"
          "hotjar"
          "fullstory"
          "logrocket"
          "newrelic"
          "@newrelic/"
          "datadog"
          "@datadog/"
        )

        proprietary_found=false

        for package in $deps; do
          for prop in "${proprietary_packages[@]}"; do
            if [[ $package == *"$prop"* ]]; then
              echo "❌ Found proprietary dependency: $package"
              proprietary_found=true
            fi
          done
        done

        if [ "$proprietary_found" = true ]; then
          echo "❌ Proprietary dependencies found - not F-Droid compatible"
          exit 1
        fi

        echo "✅ No proprietary dependencies found"

  release-validation:
    name: Release Build Validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools: 34.0.0

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Verify package.json version matches tag
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        TAG_VERSION="${{ steps.version.outputs.version }}"

        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch: package.json=$PACKAGE_VERSION, tag=$TAG_VERSION"
          exit 1
        fi

        echo "✅ Version consistency verified: $PACKAGE_VERSION"

    - name: Install dependencies
      run: npm ci

    - name: Build production release
      run: |
        npm run update-version
        npm run generate-icons
        npm run build
        npx cap copy android
        npx cap sync android

    - name: Build release APK
      working-directory: android
      run: |
        chmod +x gradlew
        ./gradlew assembleRelease --no-daemon --stacktrace

    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: currency-calculator-release-v${{ steps.version.outputs.version }}
        path: android/app/build/outputs/apk/release/app-release-unsigned.apk
        retention-days: 90

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          android/app/build/outputs/apk/release/app-release-unsigned.apk
        generate_release_notes: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  f-droid-readiness:
    name: F-Droid Readiness Report
    runs-on: ubuntu-latest
    needs: [test-build, fdroid-metadata-validation, security-audit]
    if: always()

    steps:
    - name: Generate F-Droid Readiness Report
      run: |
        echo "# 📱 F-Droid Readiness Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test-build.result }}" == "success" ]; then
          echo "✅ **Build Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.fdroid-metadata-validation.result }}" == "success" ]; then
          echo "✅ **Metadata Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Metadata Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "✅ **Security Audit**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Security Audit**: Failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test-build.result }}" == "success" ] && [ "${{ needs.fdroid-metadata-validation.result }}" == "success" ] && [ "${{ needs.security-audit.result }}" == "success" ]; then
          echo "🎉 **Overall Status**: Ready for F-Droid submission!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Create release tag if not already done" >> $GITHUB_STEP_SUMMARY
          echo "2. Fork [fdroiddata](https://gitlab.com/fdroid/fdroiddata)" >> $GITHUB_STEP_SUMMARY
          echo "3. Copy metadata file to forked repository" >> $GITHUB_STEP_SUMMARY
          echo "4. Submit merge request to F-Droid" >> $GITHUB_STEP_SUMMARY
          echo "5. See [FDROID_SUBMISSION.md](./FDROID_SUBMISSION.md) for detailed instructions" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Overall Status**: Not ready for F-Droid submission" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please fix the failing checks before submitting to F-Droid." >> $GITHUB_STEP_SUMMARY
        fi
